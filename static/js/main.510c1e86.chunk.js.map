{"version":3,"sources":["index.js"],"names":["Sort","props","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","onClick","value","Square","classNameText","isWinningSquare","className","Board","i","_this","this","squares","key","currentSquare","rows","j","BoardConfig","numRows","columns","k","numColumns","winningSquaresIndexes","length","push","renderSquare","renderBoard","React","Component","Game","_this2","Object","_Users_kyletolle_code_learning_tic_tac_toe_react_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","_Users_kyletolle_code_learning_tic_tac_toe_react_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_Users_kyletolle_code_learning_tic_tac_toe_react_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","state","history","Array","fill","indexClicked","stepNumber","xIsNext","sortIsAscending","step","setState","slice","contest","Contest","hasEnded","concat","_this3","handleSortClick","_this4","moves","map","move","desc","index","Index","row","column","jumpTo","reverse","status","_this5","current","isADraw","hasWinner","winner","handleClick","renderSort","reversed","renderMoves","_squares","_lines","_this$_lines$i","_Users_kyletolle_code_learning_tic_tac_toe_react_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","b","c","_allSquaresAreFilled","numFilledSquares","at","Math","floor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.510c1e86.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Sort(props) {\n  return (\n    <button\n    onClick={props.onClick}\n    >\n      Sort by {props.value}\n    </button>\n  );\n}\n\nfunction Square(props) {\n  let classNameText = 'square';\n  if (props.isWinningSquare === true) {\n    classNameText += ' winning';\n  }\n\n  return (\n    <button\n      className={classNameText}\n      onClick={props.onClick}\n    >\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i, isWinningSquare) {\n    return (\n      <Square\n        value={this.props.squares[i]}\n        key={i}\n        onClick={() => this.props.onClick(i)}\n        isWinningSquare={isWinningSquare}\n      />\n    );\n  }\n\n  // Got this idea from: https://blog.cloudboost.io/for-loops-in-react-render-no-you-didnt-6c9f4aa73778\n  renderBoard() {\n    let currentSquare = 0;\n    let rows = [];\n\n    for (let j = 0; j < BoardConfig.numRows; j++) {\n      let columns = [];\n      for (let k = 0; k < BoardConfig.numColumns; k++) {\n        let isWinningSquare = false;\n        if (this.props.winningSquaresIndexes != null) {\n          const winningSquaresIndexes = this.props.winningSquaresIndexes;\n          for (let a = 0; a < winningSquaresIndexes.length; a++) {\n            if (currentSquare === winningSquaresIndexes[a]) {\n              isWinningSquare = true;\n            }\n          }\n        }\n        columns.push(\n          this.renderSquare(currentSquare, isWinningSquare)\n        );\n        currentSquare += 1;\n      }\n      rows.push(\n        <div className=\"board-row\" key={j}>\n          {columns}\n        </div>\n      );\n    }\n\n    return rows;\n  }\n\n  render() {\n    return this.renderBoard();\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(0).fill(null),\n        indexClicked: null,\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      sortIsAscending: true,\n    };\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice()\n    const contest = new Contest(squares)\n    const squareAlreadyFilled = squares[i];\n    if (squareAlreadyFilled || contest.hasEnded()) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        indexClicked: i,\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  handleSortClick() {\n    this.setState({\n      sortIsAscending: !this.state.sortIsAscending,\n    });\n  }\n\n  renderSort() {\n    return (\n      <Sort\n        value={this.state.sortIsAscending ? 'Desending' : 'Ascending'}\n        onClick={() => this.handleSortClick()}\n      />\n    );\n  }\n\n  renderMoves() {\n    const history = this.state.history;\n    const moves = history.map((step, move) => {\n      let desc;\n      if (move) {\n        const index = new Index(step.indexClicked);\n        desc = 'Go to move #' + move + ' at [' + index.row() + ',' + index.column() + ']';\n      } else {\n        desc = 'Go to game start';\n      }\n      return (\n        <li key={move}>\n          <button\n            className={(this.state.stepNumber === move) ? 'current-step' : ''}\n            onClick={() => this.jumpTo(move)}\n          >\n            {desc}\n          </button>\n        </li>\n      );\n    });\n\n    return (\n      this.state.sortIsAscending ? moves : moves.reverse()\n    );\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const contest = new Contest(current.squares);\n    contest.hasEnded()\n\n    let status;\n    if (contest.isADraw()) {\n      status = 'Draw!'\n    } else if (contest.hasWinner()) {\n      status = 'Winner: ' + contest.winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n            winningSquaresIndexes={contest.winningSquaresIndexes}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <div className=\"move-list\">\n            <div className=\"moves\">Moves | {this.renderSort()}</div>\n            <ol reversed={this.state.sortIsAscending ? false : true}>{this.renderMoves()}</ol>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Contest {\n  constructor(squares) {\n    this._squares = squares;\n    this._lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    this.winningSquaresIndexes = null;\n    this.winner = null;\n  }\n\n  hasWinner() {\n    for (let i = 0; i < this._lines.length; i++) {\n      const [a, b, c] = this._lines[i];\n      if (this._squares[a] &&\n          this._squares[a] === this._squares[b] &&\n          this._squares[a] === this._squares[c]\n      ) {\n        this.winningSquaresIndexes = this._lines[i];\n        this.winner = this._squares[a];\n        return true;\n      }\n    }\n    return false;\n  }\n\n  isADraw() {\n    return !this.hasWinner() && this._allSquaresAreFilled();\n  }\n\n  hasEnded() {\n    return this.hasWinner() || this.isADraw();\n  }\n\n  _allSquaresAreFilled() {\n    let numFilledSquares = 0;\n    for (let i = 0; i < this._squares.length; i++) {\n      if (this._squares[i] != null) {\n        numFilledSquares += 1;\n      }\n    }\n    return numFilledSquares === (BoardConfig.numRows * BoardConfig.numColumns)\n  }\n}\n\nconst BoardConfig = {\n  numRows: 3,\n  numColumns: 3\n}\n\nclass Index {\n  constructor(at) {\n    this.at = at;\n  }\n\n  row() {\n    return Math.floor(this.at/BoardConfig.numRows);\n  }\n\n  column() {\n    return this.at % BoardConfig.numColumns;\n  }\n}\n\n// ================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}