{"version":3,"sources":["Sort.js","Square.js","BoardConfig.js","Board.js","Contest.js","SquareIndex.js","Game.js","index.js"],"names":["Sort","props","react_default","a","createElement","onClick","value","Square","classNameText","isWinningSquare","className","BoardConfig","numRows","numColumns","Board","i","_this","this","src_Square","squares","key","currentSquare","rows","j","columns","k","winningSquaresIndexes","length","push","renderSquare","renderBoard","Component","Contest","Object","classCallCheck","_squares","_lines","winner","_this$_lines$i","slicedToArray","b","c","hasWinner","_allSquaresAreFilled","isADraw","numFilledSquares","SquareIndex","at","Math","floor","Game","possibleConstructorReturn","getPrototypeOf","call","state","history","Array","fill","indexClicked","stepNumber","xIsNext","sortIsAscending","step","setState","slice","contest","hasEnded","concat","_this2","src_Sort","handleSortClick","_this3","moves","map","move","desc","index","row","column","jumpTo","reverse","status","_this4","current","src_Board","handleClick","renderSort","reversed","renderMoves","ReactDOM","render","src_Game","document","getElementById"],"mappings":"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","file":"static/js/main.dd73baee.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Sort(props) {\n  return (\n    <button\n    onClick={props.onClick}\n    >\n      Sort by {props.value}\n    </button>\n  );\n}\n\nexport default Sort;\n","import React from 'react';\n\nfunction Square(props) {\n  let classNameText = 'square';\n  if (props.isWinningSquare === true) {\n    classNameText += ' winning';\n  }\n\n  return (\n    <button\n      className={classNameText}\n      onClick={props.onClick}\n    >\n      {props.value}\n    </button>\n  );\n}\n\nexport default Square;\n","const BoardConfig = {\n  numRows: 3,\n  numColumns: 3\n}\n\nexport default BoardConfig;\n","import React, { Component } from 'react';\nimport Square from './Square';\nimport BoardConfig from './BoardConfig';\n\nclass Board extends Component {\n  renderSquare(i, isWinningSquare) {\n    return (\n      <Square\n        value={this.props.squares[i]}\n        key={i}\n        onClick={() => this.props.onClick(i)}\n        isWinningSquare={isWinningSquare}\n      />\n    );\n  }\n\n  // Got this idea from: https://blog.cloudboost.io/for-loops-in-react-render-no-you-didnt-6c9f4aa73778\n  renderBoard() {\n    let currentSquare = 0;\n    let rows = [];\n\n    for (let j = 0; j < BoardConfig.numRows; j++) {\n      let columns = [];\n      for (let k = 0; k < BoardConfig.numColumns; k++) {\n        let isWinningSquare = false;\n        if (this.props.winningSquaresIndexes != null) {\n          const winningSquaresIndexes = this.props.winningSquaresIndexes;\n          for (let a = 0; a < winningSquaresIndexes.length; a++) {\n            if (currentSquare === winningSquaresIndexes[a]) {\n              isWinningSquare = true;\n            }\n          }\n        }\n        columns.push(\n          this.renderSquare(currentSquare, isWinningSquare)\n        );\n        currentSquare += 1;\n      }\n      rows.push(\n        <div className=\"board-row\" key={j}>\n          {columns}\n        </div>\n      );\n    }\n\n    return rows;\n  }\n\n  render() {\n    return this.renderBoard();\n  }\n}\n\nexport default Board;\n","import BoardConfig from './BoardConfig';\n\nclass Contest {\n  constructor(squares) {\n    this._squares = squares;\n    this._lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    this.winningSquaresIndexes = null;\n    this.winner = null;\n  }\n\n  hasWinner() {\n    for (let i = 0; i < this._lines.length; i++) {\n      const [a, b, c] = this._lines[i];\n      if (this._squares[a] &&\n          this._squares[a] === this._squares[b] &&\n          this._squares[a] === this._squares[c]\n      ) {\n        this.winningSquaresIndexes = this._lines[i];\n        this.winner = this._squares[a];\n        return true;\n      }\n    }\n    return false;\n  }\n\n  isADraw() {\n    return !this.hasWinner() && this._allSquaresAreFilled();\n  }\n\n  hasEnded() {\n    return this.hasWinner() || this.isADraw();\n  }\n\n  _allSquaresAreFilled() {\n    let numFilledSquares = 0;\n    for (let i = 0; i < this._squares.length; i++) {\n      if (this._squares[i] != null) {\n        numFilledSquares += 1;\n      }\n    }\n    return numFilledSquares === (BoardConfig.numRows * BoardConfig.numColumns)\n  }\n}\n\nexport default Contest;\n","import BoardConfig from './BoardConfig';\n\nclass SquareIndex {\n  constructor(at) {\n    this.at = at;\n  }\n\n  row() {\n    return Math.floor(this.at/BoardConfig.numRows);\n  }\n\n  column() {\n    return this.at % BoardConfig.numColumns;\n  }\n}\n\nexport default SquareIndex;\n","import React, { Component } from 'react';\nimport Sort from './Sort';\nimport Board from './Board';\nimport Contest from './Contest';\nimport SquareIndex from './SquareIndex';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(0).fill(null),\n        indexClicked: null,\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      sortIsAscending: true,\n    };\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice()\n    const contest = new Contest(squares)\n    const squareAlreadyFilled = squares[i];\n    if (squareAlreadyFilled || contest.hasEnded()) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        indexClicked: i,\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  handleSortClick() {\n    this.setState({\n      sortIsAscending: !this.state.sortIsAscending,\n    });\n  }\n\n  renderSort() {\n    return (\n      <Sort\n        value={this.state.sortIsAscending ? 'Desending' : 'Ascending'}\n        onClick={() => this.handleSortClick()}\n      />\n    );\n  }\n\n  renderMoves() {\n    const history = this.state.history;\n    const moves = history.map((step, move) => {\n      let desc;\n      if (move) {\n        const index = new SquareIndex(step.indexClicked);\n        desc = 'Go to move #' + move + ' at [' + index.row() + ',' + index.column() + ']';\n      } else {\n        desc = 'Go to game start';\n      }\n      return (\n        <li key={move}>\n          <button\n            className={(this.state.stepNumber === move) ? 'current-step' : ''}\n            onClick={() => this.jumpTo(move)}\n          >\n            {desc}\n          </button>\n        </li>\n      );\n    });\n\n    return (\n      this.state.sortIsAscending ? moves : moves.reverse()\n    );\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const contest = new Contest(current.squares);\n    contest.hasEnded()\n\n    let status;\n    if (contest.isADraw()) {\n      status = 'Draw!'\n    } else if (contest.hasWinner()) {\n      status = 'Winner: ' + contest.winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n            winningSquaresIndexes={contest.winningSquaresIndexes}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <div className=\"move-list\">\n            <div className=\"moves\">Moves | {this.renderSort()}</div>\n            <ol reversed={this.state.sortIsAscending ? false : true}>{this.renderMoves()}</ol>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game';\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}